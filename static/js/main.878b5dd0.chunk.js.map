{"version":3,"sources":["Pin.components.ts","pin.utils.ts","PinInputGrid.tsx","api.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledPinInput","styled","input","props","isCorrect","ValidationResultParagraph","p","removeValuesFromArray","valuesArray","value","valueIndex","findIndex","entry","splice","PinInputGrid","pinLength","pin","onPinChanged","onPinChangedArray","validationMessage","validationResult","isValidating","inputRefs","useRef","changePinFocus","pinIndex","ref","current","focus","useEffect","onKeyDown","event","index","a","nativeEvent","code","undefined","Array","from","length","_","disabled","el","onChange","previousValue","target","defaultValue","split","reverse","values","pop","pinNumber","Number","trim","isNaN","push","validateInput","pinToCheck","Promise","resolve","reject","setTimeout","App","useState","setPin","setValidationResult","setValidationMessage","setIsValidating","validatePin","useCallback","join","result","includes","checkPin","className","pinEntry","newPin","pinEntries","entryIndex","i","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.878b5dd0.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\ninterface ValidationResultParagraphProps {\r\n    isCorrect?: boolean;\r\n}\r\n\r\nexport const StyledPinInput = styled.input<ValidationResultParagraphProps>`\r\n  width: 35px;\r\n  height: 35px;\r\n  border: 2px solid;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  margin: 8px;\r\n  font-family: 'dotsfont';\r\n  border-color: ${props => {\r\n    switch (props.isCorrect) {\r\n        case true:\r\n            return 'green'\r\n        case false:\r\n            return 'red'\r\n        default:\r\n            return '#c3c3c3';\r\n    }\r\n}}\r\n`;\r\n\r\nexport const ValidationResultParagraph = styled.p<ValidationResultParagraphProps>`\r\n  color: ${props => props.isCorrect ? 'green' : 'red'}\r\n`;\r\n\r\n","export const removeValuesFromArray = (valuesArray: string[], value: string) => {\r\n    const valueIndex = valuesArray.findIndex(entry => entry === value)\r\n    if (valueIndex === -1) {\r\n        return\r\n    }\r\n    valuesArray.splice(valueIndex, 1)\r\n}\r\n","import React, {useEffect, useRef} from 'react';\r\nimport {StyledPinInput, ValidationResultParagraph} from './Pin.components';\r\nimport {removeValuesFromArray} from './pin.utils';\r\n\r\ninterface PinInputGridProps {\r\n    pin: Array<number | undefined>;\r\n    onPinChanged: (pinEntry: number | undefined, index: number) => void;\r\n    onPinChangedArray: (pinEntries: Array<number | undefined>, index: number) => void;\r\n    pinLength: number;\r\n    validationMessage: string | undefined;\r\n    validationResult: boolean | undefined;\r\n    isValidating: boolean;\r\n}\r\n\r\nconst PIN_MIN_VALUE = 0;\r\nconst PIN_MAX_VALUE = 9;\r\nconst BACKSPACE_KEY = 'Backspace';\r\n\r\nconst PinInputGrid: React.FC<PinInputGridProps> = ({\r\n    pinLength,\r\n    pin,\r\n    onPinChanged,\r\n    onPinChangedArray,\r\n    validationMessage,\r\n    validationResult,\r\n    isValidating,\r\n}) => {\r\n    const inputRefs = useRef<HTMLInputElement[]>([]);\r\n\r\n    const changePinFocus = (pinIndex: number) => {\r\n        const ref = inputRefs.current[pinIndex];\r\n        if (ref) {\r\n            ref.focus();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        changePinFocus(0);\r\n    }, [isValidating]);\r\n\r\n    const onChange = (\r\n        event: React.ChangeEvent<HTMLInputElement>,\r\n        index: number\r\n    ) => {\r\n        const previousValue = event.target.defaultValue;\r\n        const valuesArray = event.target.value.split('').reverse();\r\n        let values = [];\r\n        while (values.length + index <= pinLength) {\r\n            removeValuesFromArray(valuesArray, previousValue);\r\n            const value = valuesArray.pop();\r\n            if (!value) {\r\n                break;\r\n            }\r\n            const pinNumber = Number(value.trim());\r\n            if (isNaN(pinNumber) || value.length === 0) {\r\n                break;\r\n            }\r\n\r\n            if (pinNumber >= PIN_MIN_VALUE && pinNumber <= PIN_MAX_VALUE) {\r\n                values.push(pinNumber);\r\n            }\r\n        }\r\n        onPinChangedArray(values, index);\r\n        if (index < pinLength - 1) {\r\n            changePinFocus(index + values.length);\r\n        }\r\n    };\r\n\r\n    const onKeyDown = async (\r\n        event: React.KeyboardEvent<HTMLInputElement>,\r\n        index: number\r\n    ) => {\r\n        const keyboardKeyCode = event.nativeEvent.code;\r\n        if (keyboardKeyCode === BACKSPACE_KEY) {\r\n            if (pin[index] === undefined) {\r\n                changePinFocus(index - 1);\r\n            } else {\r\n                onPinChanged(undefined, index);\r\n                changePinFocus(index - 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {Array.from({length: pinLength}, (_, index) => (\r\n                    <StyledPinInput\r\n                        disabled={isValidating}\r\n                        isCorrect={validationResult}\r\n                        onKeyDown={(event) => onKeyDown(event, index)}\r\n                        key={index}\r\n                        ref={(el) => {\r\n                            if (el) {\r\n                                inputRefs.current[index] = el;\r\n                            }\r\n                        }}\r\n                        onChange={(event) => onChange(event, index)}\r\n                        value={pin[index] || ''}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <ValidationResultParagraph isCorrect={validationResult}>\r\n                {validationMessage}\r\n            </ValidationResultParagraph>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PinInputGrid;\r\n","const VALID_PIN = '1234';\r\n\r\n// We can change this function to call BE API through axios\r\nexport const validateInput = (pinToCheck: string):\r\n    Promise<string> => new Promise((resolve, reject) => setTimeout(() => {\r\n    if (pinToCheck === VALID_PIN) {\r\n        resolve('Your pin is valid')\r\n    } else {\r\n        reject('Your pin is invalid')\r\n    }\r\n}, 2500))\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport PinInputGrid from './PinInputGrid';\r\nimport {validateInput} from './api';\r\n\r\nconst PIN_LENGTH = 4;\r\n\r\nfunction App() {\r\n    const [pin, setPin] = useState<Array<number | undefined>>(\r\n        new Array(PIN_LENGTH)\r\n    );\r\n    const [validationResult, setValidationResult] = useState<boolean | undefined>(\r\n        undefined\r\n    );\r\n    const [validationMessage, setValidationMessage] = useState<string | undefined>(undefined);\r\n\r\n    const [isValidating, setIsValidating] = useState(false);\r\n\r\n    const onPinChanged = (pinEntry: number | undefined, index: number) => {\r\n        const newPin = [...pin];\r\n        newPin[index] = pinEntry;\r\n        setPin(newPin);\r\n    };\r\n\r\n    const onPinChangedArray = (pinEntries: Array<number | undefined>, index: number) => {\r\n        const newPin = [...pin];\r\n        let entryIndex = 0;\r\n        for (let i = index; i < PIN_LENGTH && entryIndex < pinEntries.length; i++) {\r\n            newPin[i] = pinEntries[entryIndex];\r\n            entryIndex++;\r\n        }\r\n        setPin(newPin);\r\n    };\r\n\r\n    const validatePin = useCallback(async () => {\r\n        setIsValidating(true);\r\n        try {\r\n            const result = await validateInput(pin.join(''));\r\n            setValidationResult(true);\r\n            setValidationMessage(result);\r\n        } catch (e) {\r\n            setValidationMessage(e);\r\n            setValidationResult(false);\r\n            setPin(new Array(PIN_LENGTH));\r\n        } finally {\r\n            setIsValidating(false);\r\n        }\r\n    }, [pin]);\r\n\r\n    useEffect(() => {\r\n        const checkPin = async () => {\r\n            if (!pin.includes(undefined)) {\r\n                await validatePin();\r\n            }\r\n        };\r\n\r\n        checkPin();\r\n    }, [pin, validatePin]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <PinInputGrid\r\n                isValidating={isValidating}\r\n                validationMessage={validationMessage}\r\n                validationResult={validationResult}\r\n                onPinChanged={onPinChanged}\r\n                onPinChangedArray={onPinChangedArray}\r\n                pin={pin}\r\n                pinLength={PIN_LENGTH}\r\n            />\r\n\r\n            <button onClick={validatePin}>Validate</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}